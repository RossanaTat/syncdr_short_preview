[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intro to {syncdr}",
    "section": "",
    "text": "This document provides a short version overview of the {syncdr} R package, demonstrating some of its key functionalities for synchronizing directories. {syncdr} offers a range of tools for managing file synchronization efficiently —this is just a small preview.\nSince the code in the sample comes from an R package and isn’t runnable on its own, this guide serves as a practical example to showcase the functions in action without requiring you to run it yourself. For more details For more details, visit the official {syncdr} website.\n\n\nTo install {syncdr} from GitHub, use:\n\n#devtools::install_github(\"RossanaTat/syncdr\")\n\n\nlibrary(syncdr)\n\n\n\n\n\n\nTo illustrate how {syncdr} works, we’ll generate example directories:\n\n# Load {syncdr}\nlibrary(syncdr)\n\n# Create toy directories and initialize .syncdrenv\n.syncdrenv &lt;- toy_dirs()\n\n■■■■■■■■■                         27% | ETA:  9s\n\n\n■■■■■■■■■■■■■■■■■■■               60% | ETA:  6s\n\n# Extract paths to left and right directories\nleft  &lt;- .syncdrenv$left\nright &lt;- .syncdrenv$right\n\n# Display directory structures\ndisplay_dir_tree(path_left  = left,\n                 path_right = right)\n\n(←)Left directory structure:\nC:/Users/wb621604/AppData/Local/Temp/Rtmpuy1bmt/left\n├── A\n│   ├── A1.Rds\n│   ├── A2.Rds\n│   └── A3.Rds\n├── B\n│   ├── B1.Rds\n│   ├── B2.Rds\n│   └── B3.Rds\n├── C\n│   ├── C1.Rds\n│   ├── C2.Rds\n│   └── C3.Rds\n├── D\n│   ├── D1.Rds\n│   └── D2.Rds\n└── E\n(→)Right directory structure:\nC:/Users/wb621604/AppData/Local/Temp/Rtmpuy1bmt/right\n├── A\n├── B\n│   ├── B1.Rds\n│   └── B2.Rds\n├── C\n│   ├── C1.Rds\n│   ├── C1_duplicate.Rds\n│   ├── C2.Rds\n│   └── C3.Rds\n├── D\n│   ├── D1.Rds\n│   ├── D2.Rds\n│   └── D3.Rds\n└── E\n    ├── E1.Rds\n    ├── E2.Rds\n    └── E3.Rds\n\n\nStep 1: Compare Directory Synchronization Status\nWe first check the differences between the two directories:\n\ncompare_directories(left_path  = left,\n                    right_path = right)\n\n\n\n\n── Synchronization Summary ─────────────────────────────────────────────────────\n\n\n• Left Directory: 'C:/Users/wb621604/AppData/Local/Temp/Rtmpuy1bmt/left'\n\n\n• Right Directory: 'C:/Users/wb621604/AppData/Local/Temp/Rtmpuy1bmt/right'\n\n\n• Total Common Files: 7\n\n\n• Total Non-common Files: 9\n\n\n• Compare files by: date\n\n\n\n\n\n── Common files ────────────────────────────────────────────────────────────────\n\n\n            path modification_time_left modification_time_right  modified\n1 /left/B/B1.Rds    2025-02-13 12:03:40     2025-02-13 12:03:41     right\n2 /left/B/B2.Rds    2025-02-13 12:03:43     2025-02-13 12:03:45     right\n3 /left/C/C1.Rds    2025-02-13 12:03:41     2025-02-13 12:03:41 same date\n4 /left/C/C2.Rds    2025-02-13 12:03:45     2025-02-13 12:03:46     right\n5 /left/C/C3.Rds    2025-02-13 12:03:47     2025-02-13 12:03:48     right\n6 /left/D/D1.Rds    2025-02-13 12:03:43     2025-02-13 12:03:42      left\n7 /left/D/D2.Rds    2025-02-13 12:03:47     2025-02-13 12:03:46      left\n\n\n\n\n\n── Non-common files ────────────────────────────────────────────────────────────\n\n\n\n\n\n── Only in left ──\n\n\n\n\n\n# A tibble: 4 × 1\n  path_left     \n  &lt;fs::path&gt;    \n1 /left/A/A1.Rds\n2 /left/A/A2.Rds\n3 /left/A/A3.Rds\n4 /left/B/B3.Rds\n\n\n── Only in right ──\n\n\n# A tibble: 5 × 1\n  path_right               \n  &lt;fs::path&gt;               \n1 /right/C/C1_duplicate.Rds\n2 /right/D/D3.Rds          \n3 /right/E/E1.Rds          \n4 /right/E/E2.Rds          \n5 /right/E/E3.Rds          \n\n\nStep 2: Perform Synchronization\nNow, we perform an asymmetric synchronization from left to right. This means files present in the left directory but missing in the right will be copied over, without modifying files in the left directory:\n\nfull_asym_sync_to_right(left_path   = left,\n                         right_path = right,\n                         force      = FALSE)\n\nThese files will be DELETED in right\n\n|Files               |Action        |\n|:-------------------|:-------------|\n|/C/C1_duplicate.Rds |To be deleted |\n|/D/D3.Rds           |To be deleted |\n|/E/E1.Rds           |To be deleted |\n|/E/E2.Rds           |To be deleted |\n|/E/E3.Rds           |To be deleted |\nThese files will be COPIED (overwriting if present) to right \n\n\n|Files     |Action       |\n|:---------|:------------|\n|/D/D1.Rds |To be copied |\n|/D/D2.Rds |To be copied |\n|/A/A1.Rds |To be copied |\n|/A/A2.Rds |To be copied |\n|/A/A3.Rds |To be copied |\n|/B/B3.Rds |To be copied |\nDo you want to proceed? Type your answer (Yes/no/cancel) \n✔ synchronized"
  },
  {
    "objectID": "index.html#introduction-to-syncdr",
    "href": "index.html#introduction-to-syncdr",
    "title": "Intro to {syncdr}",
    "section": "",
    "text": "This document provides a short version overview of the {syncdr} R package, demonstrating some of its key functionalities for synchronizing directories. {syncdr} offers a range of tools for managing file synchronization efficiently —this is just a small preview.\nSince the code in the sample comes from an R package and isn’t runnable on its own, this guide serves as a practical example to showcase the functions in action without requiring you to run it yourself. For more details For more details, visit the official {syncdr} website.\n\n\nTo install {syncdr} from GitHub, use:\n\n#devtools::install_github(\"RossanaTat/syncdr\")\n\n\nlibrary(syncdr)\n\n\n\n\n\n\nTo illustrate how {syncdr} works, we’ll generate example directories:\n\n# Load {syncdr}\nlibrary(syncdr)\n\n# Create toy directories and initialize .syncdrenv\n.syncdrenv &lt;- toy_dirs()\n\n■■■■■■■■■                         27% | ETA:  9s\n\n\n■■■■■■■■■■■■■■■■■■■               60% | ETA:  6s\n\n# Extract paths to left and right directories\nleft  &lt;- .syncdrenv$left\nright &lt;- .syncdrenv$right\n\n# Display directory structures\ndisplay_dir_tree(path_left  = left,\n                 path_right = right)\n\n(←)Left directory structure:\nC:/Users/wb621604/AppData/Local/Temp/Rtmpuy1bmt/left\n├── A\n│   ├── A1.Rds\n│   ├── A2.Rds\n│   └── A3.Rds\n├── B\n│   ├── B1.Rds\n│   ├── B2.Rds\n│   └── B3.Rds\n├── C\n│   ├── C1.Rds\n│   ├── C2.Rds\n│   └── C3.Rds\n├── D\n│   ├── D1.Rds\n│   └── D2.Rds\n└── E\n(→)Right directory structure:\nC:/Users/wb621604/AppData/Local/Temp/Rtmpuy1bmt/right\n├── A\n├── B\n│   ├── B1.Rds\n│   └── B2.Rds\n├── C\n│   ├── C1.Rds\n│   ├── C1_duplicate.Rds\n│   ├── C2.Rds\n│   └── C3.Rds\n├── D\n│   ├── D1.Rds\n│   ├── D2.Rds\n│   └── D3.Rds\n└── E\n    ├── E1.Rds\n    ├── E2.Rds\n    └── E3.Rds\n\n\nStep 1: Compare Directory Synchronization Status\nWe first check the differences between the two directories:\n\ncompare_directories(left_path  = left,\n                    right_path = right)\n\n\n\n\n── Synchronization Summary ─────────────────────────────────────────────────────\n\n\n• Left Directory: 'C:/Users/wb621604/AppData/Local/Temp/Rtmpuy1bmt/left'\n\n\n• Right Directory: 'C:/Users/wb621604/AppData/Local/Temp/Rtmpuy1bmt/right'\n\n\n• Total Common Files: 7\n\n\n• Total Non-common Files: 9\n\n\n• Compare files by: date\n\n\n\n\n\n── Common files ────────────────────────────────────────────────────────────────\n\n\n            path modification_time_left modification_time_right  modified\n1 /left/B/B1.Rds    2025-02-13 12:03:40     2025-02-13 12:03:41     right\n2 /left/B/B2.Rds    2025-02-13 12:03:43     2025-02-13 12:03:45     right\n3 /left/C/C1.Rds    2025-02-13 12:03:41     2025-02-13 12:03:41 same date\n4 /left/C/C2.Rds    2025-02-13 12:03:45     2025-02-13 12:03:46     right\n5 /left/C/C3.Rds    2025-02-13 12:03:47     2025-02-13 12:03:48     right\n6 /left/D/D1.Rds    2025-02-13 12:03:43     2025-02-13 12:03:42      left\n7 /left/D/D2.Rds    2025-02-13 12:03:47     2025-02-13 12:03:46      left\n\n\n\n\n\n── Non-common files ────────────────────────────────────────────────────────────\n\n\n\n\n\n── Only in left ──\n\n\n\n\n\n# A tibble: 4 × 1\n  path_left     \n  &lt;fs::path&gt;    \n1 /left/A/A1.Rds\n2 /left/A/A2.Rds\n3 /left/A/A3.Rds\n4 /left/B/B3.Rds\n\n\n── Only in right ──\n\n\n# A tibble: 5 × 1\n  path_right               \n  &lt;fs::path&gt;               \n1 /right/C/C1_duplicate.Rds\n2 /right/D/D3.Rds          \n3 /right/E/E1.Rds          \n4 /right/E/E2.Rds          \n5 /right/E/E3.Rds          \n\n\nStep 2: Perform Synchronization\nNow, we perform an asymmetric synchronization from left to right. This means files present in the left directory but missing in the right will be copied over, without modifying files in the left directory:\n\nfull_asym_sync_to_right(left_path   = left,\n                         right_path = right,\n                         force      = FALSE)\n\nThese files will be DELETED in right\n\n|Files               |Action        |\n|:-------------------|:-------------|\n|/C/C1_duplicate.Rds |To be deleted |\n|/D/D3.Rds           |To be deleted |\n|/E/E1.Rds           |To be deleted |\n|/E/E2.Rds           |To be deleted |\n|/E/E3.Rds           |To be deleted |\nThese files will be COPIED (overwriting if present) to right \n\n\n|Files     |Action       |\n|:---------|:------------|\n|/D/D1.Rds |To be copied |\n|/D/D2.Rds |To be copied |\n|/A/A1.Rds |To be copied |\n|/A/A2.Rds |To be copied |\n|/A/A3.Rds |To be copied |\n|/B/B3.Rds |To be copied |\nDo you want to proceed? Type your answer (Yes/no/cancel) \n✔ synchronized"
  }
]